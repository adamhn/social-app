@using Microsoft.AspNet.Identity
@using SocialApp.Helpers
@model SocialApp.ViewModels.UserDetailsViewModel

@{
    ViewBag.Title = Model.GetFullName();
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-3 pt-4 text-center">
            <img src="@Url.Action("GetUserPhoto", "Users", new {UserId = Model.User.Id})" alt="Profile Image" class="profile-details-image rounded-circle h-auto w-100" />
        </div>
        <div class="col-md-9 pt-4 pl-4 pb-4 bg-light">
            <h2 class="mb-4">@Model.GetFullName()</h2>

            @if (Model.User.Work == null)
            {<p>Jobb: <em>Ej satt</em></p>}
            else
            { <p>Jobbar på <strong>@Model.User.Work</strong></p>}

            @if (Model.User.Study == null)
            {<p>Studier: <em>Ej satt</em></p> }
            else
            { <p>Har studerat på <strong>@Model.User.Study</strong></p>}

            @if (Model.User.RelationshipStatus.Status == "-")
            {<p>Relation status: <em>Ej satt</em></p> }
            else
            { <p>Är <strong>@Model.User.RelationshipStatus.Status</strong></p>}

            <p><strong>@Model.User.BirthDate.Age()</strong> år gammal.</p>
        </div>
        <div class="w-100"></div>
        <div class="col-md-3 mt-1 text-center">
            @if (Model.User.Id == User.Identity.GetUserId())
            {
                @Html.ActionLink("Change Image", "SetPhoto", "Manage", null, new { @class = "btn btn-link btn-sm" })
                @Html.ActionLink("Change Profile", "SetInformation", "Manage", null, new { @class = "btn btn-link btn-sm" })
            }
            else
            {
                switch (Model.FriendRequestFlag)
                {
                    case SocialApp.Models.FriendRequestFlag.None:
                        @Html.ActionLink("Skicka Vänförfråga", "SendFriendRequest", "Users", new { friendId = Model.User.Id }, new { @class = "btn btn-primary btn-sm" })
                        break;
                    case SocialApp.Models.FriendRequestFlag.Approved:
                        <p>Vänner</p>
                        break;
                    case SocialApp.Models.FriendRequestFlag.Awaiting:
                        <p>Väntar på godkännande</p>
                        break;
                    case SocialApp.Models.FriendRequestFlag.Rejected:
                        <p>Vänförfråga godkänndes inte.</p>
                        break;
                    default:
                        break;
                }
            }
        </div>
    </div>
    <hr />
    @if (Model.User.Id == User.Identity.GetUserId() || Model.FriendRequestFlag == SocialApp.Models.FriendRequestFlag.Approved)
    {
        <div class="row mt-4 mb-5">
            <div class="col-md-6">
                <h5 class="mb-4">Write a Post</h5>
                @using (Html.BeginForm(FormMethod.Post))
                {
                    <div class="form-group">
                        @Html.TextAreaFor(d => d.Post, new {@class = "form-control", id = "postTextarea", rows = "3"})
                        @Html.ValidationMessageFor(d => d.Post, "", new {@class = "text-danger"})
                        <div class="alert alert-danger mt-2" hidden role="alert">
                            A simple danger alert—check it out!
                        </div>
                    </div>
                }
                <input id="post" type="submit" value="Post Comment" class="btn btn-primary"/>

                <div id="post-items"></div>
            </div>
            <div class="col-md-6">
                <h5 class="mb-4">Friends</h5>
                <div class="d-flex flex-column p-2">
                    @foreach (var friend in Model.Friends)
                    {
                        <div class="d-flex flex-row mb-3">
                            <img src="@Url.Action("GetUserPhoto", "Users", new {UserId = friend.Id})" alt="Profile Picture" class="users-profile-thumbnail rounded-circle">
                            <p class="mt-2"><strong>@Html.ActionLink(friend.GetFullName(), "Details", "Users", new {userId = friend.Id}, new {@class = "text-dark"})</strong></p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row mt-5 mb-5 mr-auto ml-auto justify-content-center">
            <h5 class="text-center"><mark>You have to be friends before seeing posts wall and friends.</mark></h5>
        </div>
    }
</div>
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function() {
            // Get all posts on page load
            $.ajax({
                url: "/api/Posts/GetPosts/" + "@Model.User.Id",
                dataType: "json",
                type: "GET",
                success: function(data) {
                    var item = "";
                    // Sort data by date
                    data.sort(function(a, b) {
                        var c = new Date(a.PostedDatetime);
                        var d = new Date(b.PostedDatetime);
                        return d-c;
                    });

                    for (var i = 0; i < data.length; i++) {
                        item = item + '<div id="post-item" class="pt-4 pl-3 pr-3 pb-4 mt-4 rounded-sm bg-light border">';
                        item = item + '<p>' + data[i].Text + '</p>';
                        item = item + '<footer class="blockquote-footer">' + data[i].PostedByFullname + '';
                        item = item + '<cite class="ml-2">' + new Date(data[i].PostedDatetime).toLocaleString() + '</cite></footer></div>';
                    }

                    $('#post-items').empty();
                    $('#post-items').append(item);
                },
                error: function(xhr) {
                    alert('No Valid Data');
                }
            });

            // Handle on text area focus
            $("#postTextarea").on("focus",
                function() {
                    $('.alert').attr('hidden', 'true');
                });

            // Handle post form click
            $("#post").on("click",
                function(e) {
                    var textareaVal = $("#postTextarea").val();
                    console.log(textareaVal);

                    if (textareaVal.length === 0) {
                        e.preventDefault();
                        //alert("Cannot be empty.");
                        $('.alert').text("Post cannot be submitted empty.");
                        $('.alert').removeAttr('hidden');
                        return;
                    }

                    if (textareaVal.length < 20 || textareaVal.length > 155) {
                        e.preventDefault();
                        console.log('cannot');
                        return;
                    }

                    console.log('clicked');
                    var post = {
                        'Text': textareaVal,
                        'PostedById': "@User.Identity.GetUserId()",
                        'PostedToId': "@Model.User.Id"
                    }

                    $.ajax({
                        url: "/api/Posts/CreatePost",
                        type: "POST",
                        data: post,
                        success: function(data) {
                            location.reload();
                        }
                    })
                });


        });
    </script>
}